{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/apeks/Desktop/Developing/CMS-GPT-API/src/app/lib/db.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI as string;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('❌ MONGODB_URI must be defined in .env.local');\r\n}\r\n\r\n// Declare global cache type to avoid redeclaring on reload (especially in dev)\r\ndeclare global {\r\n  var mongooseCache: {\r\n    conn: typeof mongoose | null;\r\n    promise: Promise<typeof mongoose> | null;\r\n  };\r\n}\r\n\r\n// Reuse global cache (important for serverless/dev)\r\nlet cached = globalThis.mongooseCache;\r\n\r\nif (!cached) {\r\n  cached = globalThis.mongooseCache = {\r\n    conn: null,\r\n    promise: null,\r\n  };\r\n}\r\n\r\nexport default async function connectToDatabase() {\r\n  if (cached.conn) return cached.conn;\r\n\r\n  if (!cached.promise) {\r\n    cached.promise = mongoose.connect(MONGODB_URI, {\r\n      bufferCommands: false,\r\n      dbName: 'cms',\r\n    });\r\n  }\r\n\r\n  cached.conn = await cached.promise;\r\n  return cached.conn;\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAUA,oDAAoD;AACpD,IAAI,SAAS,WAAW,aAAa;AAErC,IAAI,CAAC,QAAQ;IACX,SAAS,WAAW,aAAa,GAAG;QAClC,MAAM;QACN,SAAS;IACX;AACF;AAEe,eAAe;IAC5B,IAAI,OAAO,IAAI,EAAE,OAAO,OAAO,IAAI;IAEnC,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;YAC7C,gBAAgB;YAChB,QAAQ;QACV;IACF;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/apeks/Desktop/Developing/CMS-GPT-API/src/app/models/page.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst pageSchema = new mongoose.Schema({\r\n  title: String,\r\n  content: String,\r\n  category: String,\r\n  meta_title: String,\r\n  meta_description: String,\r\n  keywords: [String]\r\n}, { timestamps: true });\r\n\r\nexport default mongoose.models.Page || mongoose.model('Page', pageSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,OAAO;IACP,SAAS;IACT,UAAU;IACV,YAAY;IACZ,kBAAkB;IAClB,UAAU;QAAC;KAAO;AACpB,GAAG;IAAE,YAAY;AAAK;uCAEP,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/apeks/Desktop/Developing/CMS-GPT-API/src/app/api/pages/seed/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport connectToDatabase from '../../../lib/db';\r\nimport Page from '../../../models/page';\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    await connectToDatabase();\r\n\r\n    const pages = [\r\n      {\r\n        title: \"Top 10 Things to Do in Bali\",\r\n        content: \"Bali offers a mix of adventure, beaches, temples, and nightlife...\",\r\n        category: \"Travel\"\r\n      },\r\n      {\r\n        title: \"How to Build a React App\",\r\n        content: \"This guide walks through the basics of setting up and deploying a React application...\",\r\n        category: \"Tech\"\r\n      },\r\n      {\r\n        title: \"Healthy Meal Plans for Busy People\",\r\n        content: \"Balancing nutrition and a tight schedule? Here's a guide to simple healthy meals...\",\r\n        category: \"Health\"\r\n      }\r\n    ];\r\n\r\n    const inserted = await Page.insertMany(pages);\r\n    return NextResponse.json({ message: 'Pages seeded', ids: inserted.map(p => p._id) });\r\n  } catch (error) {\r\n    console.error('❌ Error seeding pages:', error);\r\n    return NextResponse.json({ error: 'Failed to seed pages' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,CAAA,GAAA,yHAAA,CAAA,UAAiB,AAAD;QAEtB,MAAM,QAAQ;YACZ;gBACE,OAAO;gBACP,SAAS;gBACT,UAAU;YACZ;YACA;gBACE,OAAO;gBACP,SAAS;gBACT,UAAU;YACZ;YACA;gBACE,OAAO;gBACP,SAAS;gBACT,UAAU;YACZ;SACD;QAED,MAAM,WAAW,MAAM,8HAAA,CAAA,UAAI,CAAC,UAAU,CAAC;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAgB,KAAK,SAAS,GAAG,CAAC,CAAA,IAAK,EAAE,GAAG;QAAE;IACpF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF","debugId":null}}]
}