{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/apeks/Desktop/Developing/CMS-GPT-API/src/app/lib/db.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI as string;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('‚ùå MONGODB_URI must be defined in .env.local');\r\n}\r\n\r\n// Declare global cache type to avoid redeclaring on reload (especially in dev)\r\ndeclare global {\r\n  var mongooseCache: {\r\n    conn: typeof mongoose | null;\r\n    promise: Promise<typeof mongoose> | null;\r\n  };\r\n}\r\n\r\n// Reuse global cache (important for serverless/dev)\r\nlet cached = globalThis.mongooseCache;\r\n\r\nif (!cached) {\r\n  cached = globalThis.mongooseCache = {\r\n    conn: null,\r\n    promise: null,\r\n  };\r\n}\r\n\r\nexport default async function connectToDatabase() {\r\n  if (cached.conn) return cached.conn;\r\n\r\n  if (!cached.promise) {\r\n    cached.promise = mongoose.connect(MONGODB_URI, {\r\n      bufferCommands: false,\r\n      dbName: 'cms',\r\n    });\r\n  }\r\n\r\n  cached.conn = await cached.promise;\r\n  return cached.conn;\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAUA,oDAAoD;AACpD,IAAI,SAAS,WAAW,aAAa;AAErC,IAAI,CAAC,QAAQ;IACX,SAAS,WAAW,aAAa,GAAG;QAClC,MAAM;QACN,SAAS;IACX;AACF;AAEe,eAAe;IAC5B,IAAI,OAAO,IAAI,EAAE,OAAO,OAAO,IAAI;IAEnC,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;YAC7C,gBAAgB;YAChB,QAAQ;QACV;IACF;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/apeks/Desktop/Developing/CMS-GPT-API/src/app/models/user.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  email: { type: String, required: true, unique: true },\r\n  password: { type: String, required: true }, // hashed\r\n});\r\n\r\nexport default mongoose.models.User || mongoose.model('User', userSchema);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;AAC3C;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/apeks/Desktop/Developing/CMS-GPT-API/src/app/api/auth/signup/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport bcrypt from 'bcryptjs';\r\nimport connectToDatabase from '../../../lib/db';\r\nimport User from '../../../models/user';\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const { email, password } = await req.json();\r\n    await connectToDatabase();\r\n\r\n    const existing = await User.findOne({ email });\r\n    if (existing) {\r\n      return NextResponse.json({ error: 'User already exists' }, { status: 400 });\r\n    }\r\n\r\n    const hashed = await bcrypt.hash(password, 10);\r\n    await User.create({ email, password: hashed });\r\n\r\n    return NextResponse.json({ message: 'User created' }, { status: 201 });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Signup failed' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAC1C,MAAM,CAAA,GAAA,yHAAA,CAAA,UAAiB,AAAD;QAEtB,MAAM,WAAW,MAAM,8HAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE;QAAM;QAC5C,IAAI,UAAU;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,MAAM,SAAS,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAC3C,MAAM,8HAAA,CAAA,UAAI,CAAC,MAAM,CAAC;YAAE;YAAO,UAAU;QAAO;QAE5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAe,GAAG;YAAE,QAAQ;QAAI;IACtE,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgB,GAAG;YAAE,QAAQ;QAAI;IACrE;AACF","debugId":null}}]
}