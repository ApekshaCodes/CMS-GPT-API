{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/apeks/Desktop/Developing/CMS-GPT-API/src/app/lib/db.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI as string;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('❌ MONGODB_URI must be defined in .env.local');\r\n}\r\n\r\n// Declare global cache type to avoid redeclaring on reload (especially in dev)\r\ndeclare global {\r\n  var mongooseCache: {\r\n    conn: typeof mongoose | null;\r\n    promise: Promise<typeof mongoose> | null;\r\n  };\r\n}\r\n\r\n// Reuse global cache (important for serverless/dev)\r\nlet cached = globalThis.mongooseCache;\r\n\r\nif (!cached) {\r\n  cached = globalThis.mongooseCache = {\r\n    conn: null,\r\n    promise: null,\r\n  };\r\n}\r\n\r\nexport default async function connectToDatabase() {\r\n  if (cached.conn) return cached.conn;\r\n\r\n  if (!cached.promise) {\r\n    cached.promise = mongoose.connect(MONGODB_URI, {\r\n      bufferCommands: false,\r\n      dbName: 'cms',\r\n    });\r\n  }\r\n\r\n  cached.conn = await cached.promise;\r\n  return cached.conn;\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAUA,oDAAoD;AACpD,IAAI,SAAS,WAAW,aAAa;AAErC,IAAI,CAAC,QAAQ;IACX,SAAS,WAAW,aAAa,GAAG;QAClC,MAAM;QACN,SAAS;IACX;AACF;AAEe,eAAe;IAC5B,IAAI,OAAO,IAAI,EAAE,OAAO,OAAO,IAAI;IAEnC,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;YAC7C,gBAAgB;YAChB,QAAQ;QACV;IACF;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/apeks/Desktop/Developing/CMS-GPT-API/src/app/models/page.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst pageSchema = new mongoose.Schema({\r\n  title: String,\r\n  content: String,\r\n  category: String,\r\n  meta_title: String,\r\n  meta_description: String,\r\n  keywords: [String]\r\n}, { timestamps: true });\r\n\r\nexport default mongoose.models.Page || mongoose.model('Page', pageSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,OAAO;IACP,SAAS;IACT,UAAU;IACV,YAAY;IACZ,kBAAkB;IAClB,UAAU;QAAC;KAAO;AACpB,GAAG;IAAE,YAAY;AAAK;uCAEP,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/apeks/Desktop/Developing/CMS-GPT-API/src/app/lib/auth.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET!;\r\n\r\nexport function generateToken(payload: object) {\r\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: '15m' });\r\n}\r\n\r\nexport function generateRefreshToken(payload: object) {\r\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: '7d' });\r\n}\r\n\r\nexport function verifyToken(token: string) {\r\n  return jwt.verify(token, JWT_SECRET);\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;AAElC,SAAS,cAAc,OAAe;IAC3C,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAM;AAC1D;AAEO,SAAS,qBAAqB,OAAe;IAClD,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAK;AACzD;AAEO,SAAS,YAAY,KAAa;IACvC,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;AAC3B","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/apeks/Desktop/Developing/CMS-GPT-API/src/app/api/pages/bulk-update/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport connectToDatabase from '../../../lib/db';\r\nimport Page from '../../../models/page';\r\nimport { verifyToken } from '../../../lib/auth';\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const token = req.headers.get('authorization')?.split(' ')[1];\r\n    if (!token) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const decoded: any = verifyToken(token);\r\n    await connectToDatabase();\r\n\r\n    const { updates } = await req.json();\r\n    if (!Array.isArray(updates)) {\r\n      return NextResponse.json({ error: 'Invalid format. Expected an array of updates.' }, { status: 400 });\r\n    }\r\n\r\n    const updatedPages = [];\r\n\r\n    for (const update of updates) {\r\n      const { id, ...fields } = update;\r\n      if (!id) continue;\r\n\r\n      const updated = await Page.findByIdAndUpdate(id, fields, { new: true });\r\n      if (updated) {\r\n        updatedPages.push(updated._id);\r\n      }\r\n    }\r\n\r\n    return NextResponse.json({\r\n      message: 'Bulk update complete',\r\n      updatedPages\r\n    });\r\n  } catch (error: any) {\r\n    console.error('❌ Bulk Edit Error:', error.message);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,MAAM,IAAI,CAAC,EAAE;QAC7D,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,UAAe,CAAA,GAAA,2HAAA,CAAA,cAAW,AAAD,EAAE;QACjC,MAAM,CAAA,GAAA,yHAAA,CAAA,UAAiB,AAAD;QAEtB,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QAClC,IAAI,CAAC,MAAM,OAAO,CAAC,UAAU;YAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgD,GAAG;gBAAE,QAAQ;YAAI;QACrG;QAEA,MAAM,eAAe,EAAE;QAEvB,KAAK,MAAM,UAAU,QAAS;YAC5B,MAAM,EAAE,EAAE,EAAE,GAAG,QAAQ,GAAG;YAC1B,IAAI,CAAC,IAAI;YAET,MAAM,UAAU,MAAM,8HAAA,CAAA,UAAI,CAAC,iBAAiB,CAAC,IAAI,QAAQ;gBAAE,KAAK;YAAK;YACrE,IAAI,SAAS;gBACX,aAAa,IAAI,CAAC,QAAQ,GAAG;YAC/B;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;QACF;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,sBAAsB,MAAM,OAAO;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}