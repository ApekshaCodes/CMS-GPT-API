{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/apeks/Desktop/Developing/CMS-GPT-API/src/app/lib/db.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI as string;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('‚ùå MONGODB_URI must be defined in .env.local');\r\n}\r\n\r\n// Declare global cache type to avoid redeclaring on reload (especially in dev)\r\ndeclare global {\r\n  var mongooseCache: {\r\n    conn: typeof mongoose | null;\r\n    promise: Promise<typeof mongoose> | null;\r\n  };\r\n}\r\n\r\n// Reuse global cache (important for serverless/dev)\r\nlet cached = globalThis.mongooseCache;\r\n\r\nif (!cached) {\r\n  cached = globalThis.mongooseCache = {\r\n    conn: null,\r\n    promise: null,\r\n  };\r\n}\r\n\r\nexport default async function connectToDatabase() {\r\n  if (cached.conn) return cached.conn;\r\n\r\n  if (!cached.promise) {\r\n    cached.promise = mongoose.connect(MONGODB_URI, {\r\n      bufferCommands: false,\r\n      dbName: 'cms',\r\n    });\r\n  }\r\n\r\n  cached.conn = await cached.promise;\r\n  return cached.conn;\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAUA,oDAAoD;AACpD,IAAI,SAAS,WAAW,aAAa;AAErC,IAAI,CAAC,QAAQ;IACX,SAAS,WAAW,aAAa,GAAG;QAClC,MAAM;QACN,SAAS;IACX;AACF;AAEe,eAAe;IAC5B,IAAI,OAAO,IAAI,EAAE,OAAO,OAAO,IAAI;IAEnC,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;YAC7C,gBAAgB;YAChB,QAAQ;QACV;IACF;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/apeks/Desktop/Developing/CMS-GPT-API/src/app/models/page.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst pageSchema = new mongoose.Schema({\r\n  title: String,\r\n  content: String,\r\n  category: String,\r\n  meta_title: String,\r\n  meta_description: String,\r\n  keywords: [String]\r\n}, { timestamps: true });\r\n\r\nexport default mongoose.models.Page || mongoose.model('Page', pageSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,OAAO;IACP,SAAS;IACT,UAAU;IACV,YAAY;IACZ,kBAAkB;IAClB,UAAU;QAAC;KAAO;AACpB,GAAG;IAAE,YAAY;AAAK;uCAEP,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/apeks/Desktop/Developing/CMS-GPT-API/src/app/lib/auth.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET!;\r\n\r\nexport function generateToken(payload: object) {\r\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: '15m' });\r\n}\r\n\r\nexport function generateRefreshToken(payload: object) {\r\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: '7d' });\r\n}\r\n\r\nexport function verifyToken(token: string) {\r\n  return jwt.verify(token, JWT_SECRET);\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;AAElC,SAAS,cAAc,OAAe;IAC3C,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAM;AAC1D;AAEO,SAAS,qBAAqB,OAAe;IAClD,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAK;AACzD;AAEO,SAAS,YAAY,KAAa;IACvC,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;AAC3B","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/apeks/Desktop/Developing/CMS-GPT-API/src/app/lib/openai.ts"],"sourcesContent":["export async function generateSEO({\r\n    title,\r\n    content,\r\n    category,\r\n  }: {\r\n    title: string;\r\n    content: string;\r\n    category?: string;\r\n  }) {\r\n    const OPENAI_API_KEY = process.env.OPENAI_API_KEY!;\r\n    const prompt = `\r\n  Generate SEO metadata in JSON for the following CMS page:\r\n  \r\n  Title: ${title}\r\n  Category: ${category ?? 'N/A'}\r\n  Content: ${content.slice(0, 2000)}\r\n  \r\n  Respond with:\r\n  {\r\n    \"meta_title\": \"...\",\r\n    \"meta_description\": \"...\",\r\n    \"keywords\": [\"...\"]\r\n  }\r\n  `;\r\n  \r\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${OPENAI_API_KEY}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'gpt-3.5-turbo',\r\n        messages: [{ role: 'user', content: prompt }],\r\n        temperature: 0.7,\r\n      }),\r\n    });\r\n  \r\n  console.log('üîç OpenAI response status:', response.status);\r\n  \r\n    if (response.status == 401) {\r\n      return {\r\n        meta_title: title,\r\n        meta_description: `Read more about ${title}.`,\r\n        keywords: [title.toLowerCase().replace(/\\s+/g, '-'), 'cms'],\r\n      };\r\n    }\r\n  \r\n    const json = await response.json();\r\n    const text = json.choices?.[0]?.message?.content || '{}';\r\n    return JSON.parse(text);\r\n  }\r\n  "],"names":[],"mappings":";;;AAAO,eAAe,YAAY,EAC9B,KAAK,EACL,OAAO,EACP,QAAQ,EAKT;IACC,MAAM,iBAAiB,QAAQ,GAAG,CAAC,cAAc;IACjD,MAAM,SAAS,CAAC;;;SAGX,EAAE,MAAM;YACL,EAAE,YAAY,MAAM;WACrB,EAAE,QAAQ,KAAK,CAAC,GAAG,MAAM;;;;;;;;EAQlC,CAAC;IAEC,MAAM,WAAW,MAAM,MAAM,8CAA8C;QACzE,QAAQ;QACR,SAAS;YACP,eAAe,CAAC,OAAO,EAAE,gBAAgB;YACzC,gBAAgB;QAClB;QACA,MAAM,KAAK,SAAS,CAAC;YACnB,OAAO;YACP,UAAU;gBAAC;oBAAE,MAAM;oBAAQ,SAAS;gBAAO;aAAE;YAC7C,aAAa;QACf;IACF;IAEF,QAAQ,GAAG,CAAC,8BAA8B,SAAS,MAAM;IAEvD,IAAI,SAAS,MAAM,IAAI,KAAK;QAC1B,OAAO;YACL,YAAY;YACZ,kBAAkB,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;YAC7C,UAAU;gBAAC,MAAM,WAAW,GAAG,OAAO,CAAC,QAAQ;gBAAM;aAAM;QAC7D;IACF;IAEA,MAAM,OAAO,MAAM,SAAS,IAAI;IAChC,MAAM,OAAO,KAAK,OAAO,EAAE,CAAC,EAAE,EAAE,SAAS,WAAW;IACpD,OAAO,KAAK,KAAK,CAAC;AACpB","debugId":null}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/apeks/Desktop/Developing/CMS-GPT-API/src/app/api/pages/%5Bid%5D/seo/generate/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport connectToDatabase from '../../../../../lib/db';\r\nimport Page from '../../../../../models/page';\r\nimport { verifyToken } from '../../../../../lib/auth';\r\nimport { generateSEO } from '../../../../../lib/openai';\r\n\r\nexport async function POST(\r\n  req: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    // ‚úÖ Check for token\r\n    const token = req.headers.get('authorization')?.split(' ')[1];\r\n    console.log('üîç Token:', token);\r\n    if (!token) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const decoded: any = verifyToken(token);\r\n    console.log('üîç Decoded token:', decoded);\r\n    await connectToDatabase();\r\n\r\n    const pageId = params.id;\r\n    console.log('üîç Page ID:', pageId);\r\n    const page = await Page.findById(pageId);\r\n    console.log('üîç Page found:', page);\r\n    if (!page) {\r\n      return NextResponse.json({ error: 'Page not found' }, { status: 404 });\r\n    }\r\n\r\n    const seo = await generateSEO({\r\n      title: page.title,\r\n      content: page.content,\r\n      category: page.category\r\n    });\r\n\r\n    page.meta_title = seo.meta_title;\r\n    page.meta_description = seo.meta_description;\r\n    page.keywords = seo.keywords;\r\n    await page.save();\r\n\r\n    return NextResponse.json({ message: 'SEO metadata generated', seo });\r\n  } catch (error: any) {\r\n    console.error('‚ùå SEO generation error:', error.message);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,eAAe,KACpB,GAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,oBAAoB;QACpB,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,MAAM,IAAI,CAAC,EAAE;QAC7D,QAAQ,GAAG,CAAC,aAAa;QACzB,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,UAAe,CAAA,GAAA,2HAAA,CAAA,cAAW,AAAD,EAAE;QACjC,QAAQ,GAAG,CAAC,qBAAqB;QACjC,MAAM,CAAA,GAAA,yHAAA,CAAA,UAAiB,AAAD;QAEtB,MAAM,SAAS,OAAO,EAAE;QACxB,QAAQ,GAAG,CAAC,eAAe;QAC3B,MAAM,OAAO,MAAM,8HAAA,CAAA,UAAI,CAAC,QAAQ,CAAC;QACjC,QAAQ,GAAG,CAAC,kBAAkB;QAC9B,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,MAAM,MAAM,MAAM,CAAA,GAAA,6HAAA,CAAA,cAAW,AAAD,EAAE;YAC5B,OAAO,KAAK,KAAK;YACjB,SAAS,KAAK,OAAO;YACrB,UAAU,KAAK,QAAQ;QACzB;QAEA,KAAK,UAAU,GAAG,IAAI,UAAU;QAChC,KAAK,gBAAgB,GAAG,IAAI,gBAAgB;QAC5C,KAAK,QAAQ,GAAG,IAAI,QAAQ;QAC5B,MAAM,KAAK,IAAI;QAEf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAA0B;QAAI;IACpE,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,2BAA2B,MAAM,OAAO;QACtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}